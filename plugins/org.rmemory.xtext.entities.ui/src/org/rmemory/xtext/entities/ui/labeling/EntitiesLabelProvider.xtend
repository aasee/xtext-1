/*
 * generated by Xtext 2.10.0
 */
package org.rmemory.xtext.entities.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.rmemory.xtext.entities.entities.Attribute
import org.rmemory.xtext.entities.entities.AttributeType
import org.rmemory.xtext.entities.entities.BasicType
import org.rmemory.xtext.entities.entities.EntityType

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class EntitiesLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	@Inject extension TypeRepresentation
	
	def text (Attribute a) {
		a.name + 
			if (a.type != null)
				" : " + a.type.representation
			else ""
	}

	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}

class TypeRepresentation {
	def representation (AttributeType t) {
		val elementType = t.elementType
		val elementTypeRepr = 
		switch (elementType) {
			BasicType : elementType.typeName
			EntityType : elementType?.entity.name
		}
		elementTypeRepr + if  (t.array) "[]" else ""
	}
}